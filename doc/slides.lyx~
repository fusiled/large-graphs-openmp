#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Accelerating large graph algorithms using OpenMP
\end_layout

\begin_layout Author
Matteo M.
 Fusi
\end_layout

\begin_layout Frame
Concepts:
\end_layout

\begin_layout Itemize
\begin_inset Formula $G(V,E)$
\end_inset

, Where 
\begin_inset Formula $V$
\end_inset

 are the nodes and 
\begin_inset Formula $E$
\end_inset

 are the edges.
 If the weight of the edges must be taken into account the structure 
\begin_inset Formula $W$
\end_inset

 of size 
\begin_inset Formula $E^{2}$
\end_inset

is considered.
\end_layout

\begin_layout Itemize
Vertex are packed into an array 
\begin_inset Formula $V_{ar}$
\end_inset

 of size 
\begin_inset Formula $|V|$
\end_inset

.
 Every Vertex has a pointer to its adjacency list.
\end_layout

\begin_layout Itemize
Adjacency lists are packed into a large size array 
\begin_inset Formula $E_{ar}$
\end_inset

 if size 
\begin_inset Formula $|E|$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $V_{ar}$
\end_inset

 and 
\begin_inset Formula $E_{ar}$
\end_inset


\end_layout

\begin_layout Itemize
Each vertex points to the starting position of its own adjacency list,
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
BFS - Breadth-First Search
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
One thread per vertex
\end_layout

\begin_layout Itemize
Support arrays (all of size 
\begin_inset Formula $|V|$
\end_inset

): 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $F$
\end_inset

 is an array of boolean values.
\begin_inset Formula $F[a]=true$
\end_inset

 if it's frontier at the moment, otherwise it is 
\begin_inset Formula $false$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $V$
\end_inset

 is an array of boolean values.
\begin_inset Formula $V[a]=true$
\end_inset

 if it had been visited, otherwise it is 
\begin_inset Formula $false$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $C$
\end_inset

 is an array of integer values.
 
\begin_inset Formula $C[a]$
\end_inset

 stores the minimal number of edges of each vertex from the source vertex
 
\begin_inset Formula $S$
\end_inset

 to 
\begin_inset Formula $a$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
BFS - Logic
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In each iteration, each vertex looks at its entry in the frontier array
 
\begin_inset Formula $F$
\end_inset

.
 If 
\begin_inset Formula $true$
\end_inset

, it fetches its cost from the cost array 
\begin_inset Formula $C$
\end_inset

 and updates all the costs of its neighbors if more than its own cost plus
 one using the edge list 
\begin_inset Formula $E$
\end_inset

 .
 The vertex removes its own entry from the frontier array 
\begin_inset Formula $F$
\end_inset

 and adds to the visited array 
\begin_inset Formula $X$
\end_inset

.
 It also adds its neighbors to 
\begin_inset Formula $F$
\end_inset

 if the neighbor is not already visited.
 
\bar under
This process is repeated until the frontier is empty
\bar default
.
 This algorithm needs iterations of order of the diameter of the graph 
\begin_inset Formula $G(V,E)$
\end_inset

 in the worst case.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fun cuda_bfs(Graph G(V,E), Source S)
\end_layout

\begin_layout Plain Layout

	//init the structures
\end_layout

\begin_layout Plain Layout

	Create vertex array V_ar from all vertices 
\end_layout

\begin_layout Plain Layout

		and edge Array E_ar from all edges in G(V, E)
\end_layout

\begin_layout Plain Layout

	Create F, X and C of size V
\end_layout

\begin_layout Plain Layout

	Initialize F and X to false and C to INF
\end_layout

\begin_layout Plain Layout

	F[S]=true, C[S]=0
\end_layout

\begin_layout Plain Layout

	//iterate until the frontier set is empty
\end_layout

\begin_layout Plain Layout

	while F is not Empty do
\end_layout

\begin_layout Plain Layout

		//update state through a parallel loop.
\end_layout

\begin_layout Plain Layout

		for each vertex V_ar in parallel do
\end_layout

\begin_layout Plain Layout

			//In openMp set the chunk size properly.
 For all vertex in the graph
\end_layout

\begin_layout Plain Layout

			Cuda_Bfs_Kernel(V_ar, E_ar, F, X, C)
\end_layout

\begin_layout Plain Layout

		end for
\end_layout

\begin_layout Plain Layout

	end while
\end_layout

\begin_layout Plain Layout

end fun
\end_layout

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//FIXME fix this function for an OpenMP implementation
\end_layout

\begin_layout Plain Layout

fun cuda_bfs_kernel(V_ar, E_ar, F, X, C)
\end_layout

\begin_layout Plain Layout
\noindent

	tid = getThreadID //one thread is associated to a vertex
\end_layout

\begin_layout Plain Layout

	//do something if the node is in the frontier set
\end_layout

\begin_layout Plain Layout

	if F[tid] then
\end_layout

\begin_layout Plain Layout

		//set node visited and not anymore in the frontier
\end_layout

\begin_layout Plain Layout

		F[tid]=false,
\end_layout

\begin_layout Plain Layout

		X[tid]=true
\end_layout

\begin_layout Plain Layout

		//update neighbours
\end_layout

\begin_layout Plain Layout

		for all neighbors nid of tid do
\end_layout

\begin_layout Plain Layout

			//check if the neighbor was visited.
 If not..
\end_layout

\begin_layout Plain Layout

			if !X[nid] then
\end_layout

\begin_layout Plain Layout

				//increase cost and update frontier
\end_layout

\begin_layout Plain Layout

				C[nid]=C[tid]+1
\end_layout

\begin_layout Plain Layout

				F[nid]=true
\end_layout

\begin_layout Plain Layout

			end if
\end_layout

\begin_layout Plain Layout

		end for
\end_layout

\begin_layout Plain Layout

	end if
\end_layout

\begin_layout Plain Layout

end fun
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
SSSP - Single-Source Shortest Path
\end_layout

\end_inset


\end_layout

\begin_layout Frame
Support structures:
\end_layout

\begin_layout Itemize
\begin_inset Formula $M$
\end_inset

 is a boolean mask of size 
\begin_inset Formula $|V|$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $C$
\end_inset

 is the cost array of size 
\begin_inset Formula $|V|$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $U$
\end_inset

 is an alternate array of size 
\begin_inset Formula $|V|$
\end_inset

.
 It is a sort of buffer that contains the updated cost calculated in 
\emph on
cuda_sssp_kernel_1
\emph default
 function.
\end_layout

\begin_layout Standard
In each iteration each vertex checks if it is in the mask M.
 If yes, it fetches its current cost from the cost array C and its neighborâ€™s
 weights from the weight array W.
 The cost of each neighbor is updated if greater than the cost of current
 vertex plus the edge weight to that neighbor.
 The new cost is not reflected in the cost array but is updated in an alternate
 array U.
 At the end of the execution of the kernel, a second kernel compares cost
 C with updating cost U.
 It updates the cost C only if it is more than U and makes its own entry
 in the mask M.
 The updating cost array reflects the cost array after each kernel execution
 for consistency.
 
\bar under
The second stage of kernel execution is required as there is no synchronization
 between the CUDA multiprocessors
\bar default
 (openMP has synchronization barrier.
 We can simplify the algorithm).
 Updating the cost at the time of modification itself can result in read
 after write inconsistencies.
 The second stage kernel also toggles a flag if any mask is set.
 If this flag is not set the execution stops.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fun cuda_sssp(Graph G(V,E,W), Source Vertex S)
\end_layout

\begin_layout Plain Layout

	Create vertex array V_ar , edge array E_ar and weight array W_ar from G(V,E,W)
\end_layout

\begin_layout Plain Layout

	Create mask array M, cost array C and Updating cost array U of size V
\end_layout

\begin_layout Plain Layout

	Initialize mask M to false, cost array C and Updating cost array U to INF
\end_layout

\begin_layout Plain Layout

	M[S]=true
\end_layout

\begin_layout Plain Layout

	C[S]=0
\end_layout

\begin_layout Plain Layout

	U[S]=0
\end_layout

\begin_layout Plain Layout

	while M is not Empty do
\end_layout

\begin_layout Plain Layout

		for each vertex V in parallel do
\end_layout

\begin_layout Plain Layout

			Invoke CUDA SSSP KERNEL1(V_ar, E_ar, W, M, C, U)
\end_layout

\begin_layout Plain Layout

			Invoke CUDA SSSP KERNEL2(V_ar, E_ar, W, M, C, U)
\end_layout

\begin_layout Plain Layout

		end for
\end_layout

\begin_layout Plain Layout

	end while
\end_layout

\begin_layout Plain Layout

end fun
\end_layout

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fun cuda_sssp_kernel_1(V_ar , E_ar, W, M, C, U)
\end_layout

\begin_layout Plain Layout

	tid = getThreadID
\end_layout

\begin_layout Plain Layout

	if M[tid] then
\end_layout

\begin_layout Plain Layout

		M[tid] = false
\end_layout

\begin_layout Plain Layout

		for all neighbors nid of tid do
\end_layout

\begin_layout Plain Layout

			if U[nid]> C[tid] + W[nid] then
\end_layout

\begin_layout Plain Layout

				U[nid] = C[tid] + W[nid]
\end_layout

\begin_layout Plain Layout

			end if
\end_layout

\begin_layout Plain Layout

		end for
\end_layout

\begin_layout Plain Layout

	end if
\end_layout

\begin_layout Plain Layout

end fun
\end_layout

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fun cuda_sssp_kernel_2(V_ar, E_ar, W, M, C, U)
\end_layout

\begin_layout Plain Layout

	tid = getThreadID
\end_layout

\begin_layout Plain Layout

	if C[tid] > U[tid] then
\end_layout

\begin_layout Plain Layout

		C[tid] = U[tid]
\end_layout

\begin_layout Plain Layout

		M[tid] = true
\end_layout

\begin_layout Plain Layout

	end if
\end_layout

\begin_layout Plain Layout

	U[tid] = C[tid]
\end_layout

\begin_layout Plain Layout

end fun
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
APSP- All Pairs Shortest Path
\end_layout

\end_inset


\end_layout

\begin_layout Frame
All pairs shortest path problem is, given weighted graph G(V, E,W ) with
 positive weights, find the least weighted path from every vertex to every
 other vertex in the given graph.
\end_layout

\begin_layout Itemize
Use Parallel Floyd-Warshal
\end_layout

\begin_layout Itemize
Use and adjacency matrix, since the output is of
\begin_inset Formula $O(V^{2})$
\end_inset

 (Not clear why)
\end_layout

\begin_layout Itemize
Use 
\begin_inset Formula $V^{2}$
\end_inset

threads (in OpenMP this is not possible, a fix is required)
\end_layout

\begin_layout Itemize
There is an alternative of Floyd Warshall algorithm using 
\begin_inset Formula $O(V)$
\end_inset

 threads, each running a loop of 
\begin_inset Formula $O(V)$
\end_inset

 inside it.
 Authors of the paper found this slower.
 Evaluate if it's possible to implement this one.
 
\end_layout

\begin_layout Quotation
[...] it took around 9 seconds as compared to 1 second taken by Algorithm [the
 following one]
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fun parallel_floyd_warshall( G(V,E,W) )
\end_layout

\begin_layout Plain Layout

	Create adjacency Matrix A from G(V, E,W )
\end_layout

\begin_layout Plain Layout

	for k from 1 to V do
\end_layout

\begin_layout Plain Layout

		for all Elements in the A, where 1 <= i, j <= V in parallel do
\end_layout

\begin_layout Plain Layout

			A[i,j] = min( A[i,j], A[i,k]+A[k,j])
\end_layout

\begin_layout Plain Layout

		end for
\end_layout

\begin_layout Plain Layout

	end for
\end_layout

\begin_layout Plain Layout

end fun
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Another alternative is to run SSSP for all the vertices.
\end_layout

\begin_layout Itemize
This is faster than the Floyd-Warshal algorithm because this one requires
 a single 
\begin_inset Formula $O(V)$
\end_inset

 operation looping over 
\begin_inset Formula $O(V^{2})$
\end_inset

 threads which creates extra overhead for context switching the threads
 on the SIMD processors.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fun apsp_using_sssp( G(V,E,W) )
\end_layout

\begin_layout Plain Layout

	Create V_ar, E_ar, W_ar from G(V,E,W),
\end_layout

\begin_layout Plain Layout

	Create mask array M, cost array C and updating cost array U of size V
\end_layout

\begin_layout Plain Layout

	for S from 1 to V do
\end_layout

\begin_layout Plain Layout

		M[S] = true
\end_layout

\begin_layout Plain Layout

		C[S] = 0
\end_layout

\begin_layout Plain Layout

		while M is not Empty do
\end_layout

\begin_layout Plain Layout

			for each vertex V in parallel do
\end_layout

\begin_layout Plain Layout

				cuda_sssp_kernel_1(V_ar, E_ar, W_ar, M, C, U)
\end_layout

\begin_layout Plain Layout

				cuda_sssp_kernel_2(V_ar, E_ar, W_ar, M, C, U)
\end_layout

\begin_layout Plain Layout

			end for
\end_layout

\begin_layout Plain Layout

		end while
\end_layout

\begin_layout Plain Layout

	end for
\end_layout

\begin_layout Plain Layout

end fun
\end_layout

\end_inset


\end_layout

\end_body
\end_document
