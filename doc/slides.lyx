#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Accelerating large graph algorithms using OpenMP
\end_layout

\begin_layout Author
Matteo M.
 Fusi
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Graph Model
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $G(V,E)$
\end_inset

, Where 
\begin_inset Formula $V$
\end_inset

 are the nodes and 
\begin_inset Formula $E$
\end_inset

 are the edges.
\end_layout

\begin_layout Itemize
Adjacency lists are packed into a large size array.
 (Compact adjacency list form???)
\end_layout

\begin_layout Itemize
\begin_inset Formula $V_{ar}$
\end_inset

 and 
\begin_inset Formula $E_{ar}$
\end_inset


\end_layout

\begin_layout Itemize
Each vertex points to the starting position of its own adjacency list,
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
BFS - Breadth-First Search
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
One thread per vertex
\end_layout

\begin_layout Itemize
Support arrays (all of size 
\begin_inset Formula $|V|$
\end_inset

): 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $F$
\end_inset

 is an array of boolean values.
\begin_inset Formula $F[a]=true$
\end_inset

 if it's frontier at the moment, otherwise it is 
\begin_inset Formula $false$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $V$
\end_inset

 is an array of boolean values.
\begin_inset Formula $V[a]=true$
\end_inset

 if it had been visited, otherwise it is 
\begin_inset Formula $false$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $C$
\end_inset

 is an array of integer values.
 
\begin_inset Formula $C[a]$
\end_inset

 stores the minimal number of edges of each vertex from the source vertex
 
\begin_inset Formula $S$
\end_inset

 to 
\begin_inset Formula $a$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
BFS - Logic
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In each iteration, each vertex looks at its entry in the frontier array
 
\begin_inset Formula $F$
\end_inset

.
 If 
\begin_inset Formula $true$
\end_inset

, it fetches its cost from the cost array 
\begin_inset Formula $C$
\end_inset

 and updates all the costs of its neighbors if more than its own cost plus
 one using the edge list 
\begin_inset Formula $E$
\end_inset

 .
 The vertex removes its own entry from the frontier array 
\begin_inset Formula $F$
\end_inset

 and adds to the visited array 
\begin_inset Formula $X$
\end_inset

.
 It also adds its neighbors to 
\begin_inset Formula $F$
\end_inset

 if the neighbor is not already visited.
 
\bar under
This process is repeated until the frontier is empty
\bar default
.
 This algorithm needs iterations of order of the diameter of the graph 
\begin_inset Formula $G(V,E)$
\end_inset

 in the worst case.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fun Cuda_Bfs(Graph G(V,E), Source S)
\end_layout

\begin_layout Plain Layout

	//init the structures
\end_layout

\begin_layout Plain Layout

	Create vertex array V_ar from all vertices 
\end_layout

\begin_layout Plain Layout

		and edge Array E_ar from all edges in G(V, E)
\end_layout

\begin_layout Plain Layout

	Create F, X and C of size V
\end_layout

\begin_layout Plain Layout

	Initialize F and X to false and C to INF
\end_layout

\begin_layout Plain Layout

	F[S]=true, C[S]=0
\end_layout

\begin_layout Plain Layout

	//iterate until the frontier set is empty
\end_layout

\begin_layout Plain Layout

	while F is not Empty do
\end_layout

\begin_layout Plain Layout

		//update state through a parallel loop.
\end_layout

\begin_layout Plain Layout

		for each vertex V_ar in parallel do
\end_layout

\begin_layout Plain Layout

			//In openMp set the chunk size properly
\end_layout

\begin_layout Plain Layout

			Cuda_Bfs_Kernel(V_ar, E_ar, F, X, C)
\end_layout

\begin_layout Plain Layout

		end for
\end_layout

\begin_layout Plain Layout

	end while
\end_layout

\begin_layout Plain Layout

end fun
\end_layout

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//FIXME fix this function for an OpenMP implementation
\end_layout

\begin_layout Plain Layout

fun Cuda_Bfs_Kernel(V_ar, E_ar, F, X, C)
\end_layout

\begin_layout Plain Layout
\noindent

	tid = getThreadID //one thread is associated to a vertex
\end_layout

\begin_layout Plain Layout

	//do something if the node is in the frontier set
\end_layout

\begin_layout Plain Layout

	if F[tid] then
\end_layout

\begin_layout Plain Layout

		//set node visited and not anymore in the frontier
\end_layout

\begin_layout Plain Layout

		F[tid]=false,
\end_layout

\begin_layout Plain Layout

		X[tid]=true
\end_layout

\begin_layout Plain Layout

		//update neighbours
\end_layout

\begin_layout Plain Layout

		for all neighbors nid of tid do
\end_layout

\begin_layout Plain Layout

			//check if the neighbor was visited.
 If not..
\end_layout

\begin_layout Plain Layout

			if !X[nid] then
\end_layout

\begin_layout Plain Layout

				//increase cost and update frontier
\end_layout

\begin_layout Plain Layout

				C[nid]=C[tid]+1
\end_layout

\begin_layout Plain Layout

				F[nid]=true
\end_layout

\begin_layout Plain Layout

			end if
\end_layout

\begin_layout Plain Layout

		end for
\end_layout

\begin_layout Plain Layout

	end if
\end_layout

\begin_layout Plain Layout

end fun
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
SSSP - Single-Source Shortest Path
\end_layout

\end_inset


\end_layout

\begin_layout Frame
Support structures:
\end_layout

\begin_layout Itemize
\begin_inset Formula $M$
\end_inset

 is a boolean mask of size 
\begin_inset Formula $|V|$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $W$
\end_inset

 is the weight array of size 
\begin_inset Formula $|E|$
\end_inset


\end_layout

\begin_layout Standard
In each iteration each vertex checks
\end_layout

\end_body
\end_document
